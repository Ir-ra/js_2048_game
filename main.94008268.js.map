{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","startMsg","winMsg","loseMsg","cells","querySelectorAll","gameScore","size","score","gameBoard","initGame","r","c","generate","emptyCells","push","length","randCell","Math","floor","random","refreshBoard","cellValue","cellElement","textContent","className","classList","add","updateScore","newScore","ifWinner","ifLooser","moveCommands","command","moved","move","rCoord","cCoord","rCopy","cCopy","newRow","newCol","nextCellValue","remove","moveUp","col","row","moveDown","moveLeft","moveRight","replace","innerHTML","addEventListener","e","key"],"mappings":"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","file":"main.94008268.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.start');\nconst startMsg = document.querySelector('.message-start');\nconst winMsg = document.querySelector('.message-win');\nconst loseMsg = document.querySelector('.message-lose');\nconst cells = document.querySelectorAll('.field-cell');\nconst gameScore = document.querySelector('.game-score');\n\nconst size = 4;\nlet score = 0;\nconst gameBoard = [];\n\nfunction initGame() {\n  for (let r = 0; r < size; r++) {\n    gameBoard[r] = [];\n\n    for (let c = 0; c < size; c++) {\n      gameBoard[r][c] = 0;\n    }\n  }\n}\n\nfunction generate() {\n  const emptyCells = [];\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      if (gameBoard[r][c] === 0) {\n        emptyCells.push({\n          r,\n          c,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    gameBoard[randCell.r][randCell.c] = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nfunction refreshBoard() {\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      const cellValue = gameBoard[r][c];\n      const cellIndex = r * size + c;\n      const cellElement = cells[cellIndex];\n\n      cellElement.textContent = cellValue || '';\n      cellElement.className = 'field-cell';\n\n      if (cellValue) {\n        cellElement.classList.add(`field-cell--${cellValue}`);\n      }\n    }\n  }\n}\n\nfunction updateScore(newScore) {\n  score = newScore;\n  gameScore.textContent = score;\n}\n\nfunction ifWinner() {\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      if (gameBoard[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nfunction ifLooser() {\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      if (gameBoard[r][c] === 0) {\n        return false;\n      }\n\n      if (c !== size - 1\n        && gameBoard[r][c] === gameBoard[r][c + 1]) {\n        return false;\n      }\n\n      if (r !== size - 1\n        && gameBoard[r][c] === gameBoard[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nfunction moveCommands(command) {\n  let moved = false;\n\n  function move(r, c, rCoord, cCoord) {\n    let rCopy = r;\n    let cCopy = c;\n    const cellValue = gameBoard[rCopy][cCopy];\n\n    if (cellValue) {\n      let newRow = rCopy + rCoord;\n      let newCol = cCopy + cCoord;\n\n      while (\n        newRow >= 0\n        && newRow < size\n        && newCol >= 0\n        && newCol < size\n      ) {\n        const nextCellValue = gameBoard[newRow][newCol];\n\n        if (!nextCellValue) {\n          gameBoard[newRow][newCol] = cellValue;\n          gameBoard[rCopy][cCopy] = 0;\n          rCopy = newRow;\n          cCopy = newCol;\n          newRow += rCoord;\n          newCol += cCoord;\n          moved = true;\n        } else\n        if (nextCellValue === cellValue) {\n          gameBoard[newRow][newCol] = cellValue * 2;\n          gameBoard[rCopy][cCopy] = 0;\n          updateScore(score + cellValue * 2);\n          moved = true;\n\n          if (gameBoard[newRow][newCol] === 2048) {\n            winMsg.classList.remove('hidden');\n          }\n          break;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  function moveUp() {\n    for (let col = 0; col < size; col++) {\n      for (let row = 1; row < size; row++) {\n        move(row, col, -1, 0);\n      }\n    }\n  }\n\n  function moveDown() {\n    for (let col = 0; col < size; col++) {\n      for (let row = size - 2; row >= 0; row--) {\n        move(row, col, 1, 0);\n      }\n    }\n  }\n\n  function moveLeft() {\n    for (let row = 0; row < size; row++) {\n      for (let col = 1; col < size; col++) {\n        move(row, col, 0, -1);\n      }\n    }\n  }\n\n  function moveRight() {\n    for (let row = 0; row < size; row++) {\n      for (let col = size - 2; col >= 0; col--) {\n        move(row, col, 0, 1);\n      }\n    }\n  }\n\n  switch (command) {\n    case 'up':\n      moveUp();\n      break;\n    case 'down':\n      moveDown();\n      break;\n    case 'left':\n      moveLeft();\n      break;\n    case 'right':\n      moveRight();\n      break;\n  }\n\n  if (moved) {\n    generate();\n    refreshBoard();\n\n    if (ifLooser()) {\n      loseMsg.classList.remove('hidden');\n      startButton.classList.replace('restart', 'start');\n      startButton.innerHTML = 'Restart';\n    }\n\n    if (ifWinner()) {\n      winMsg.classList.remove('hidden');\n    }\n  }\n}\n\nstartButton.addEventListener('click', (e) => {\n  initGame();\n  generate();\n  generate();\n  refreshBoard();\n  updateScore(0);\n\n  startButton.classList.replace('start', 'restart');\n  startButton.innerHTML = 'Start';\n  startMsg.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (e.key === 'ArrowUp') {\n    moveCommands('up');\n  } else if (e.key === 'ArrowDown') {\n    moveCommands('down');\n  } else if (e.key === 'ArrowLeft') {\n    moveCommands('left');\n  } else if (e.key === 'ArrowRight') {\n    moveCommands('right');\n  }\n});\n"]}